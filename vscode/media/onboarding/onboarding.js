//declaring svg icons
const copyIcon = `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
<path clip-rule="evenodd" d="M6 6L7.5 4.5H15.621L21 9.879V21L19.5 22.5H7.5L6 21V6ZM19.5 10.5L15 6H7.5V21H19.5V10.5Z" />
<path clip-rule="evenodd" d="M4.5 1.5L3 3V18L4.5 19.5V3H14.121L12.621 1.5H4.5Z" />
</svg>
`;

const mergeIcon = `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
<path clip-rule="evenodd" d="M21 1.5L22.5 3V9L21 10.5H9L7.5 9V3L9 1.5H21ZM21 3H9V9H21V3Z" />
<path clip-rule="evenodd" d="M21 13.5L22.5 15V21L21 22.5H9L7.5 21V15L9 13.5H21ZM21 15H9V21H21V15Z" />
<path d="M1.5 9.5889L3.92121 12.0101L1.5 14.4313L2.54028 15.471L6 12.0101L2.54028 8.5498L1.5 9.5889Z" />
</svg>
`;

const dartIcon = `<svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_1896_4)">
<path d="M2.44739 9.55215L0.395172 7.49993C0.150814 7.2496 0 6.89595 0 6.55185C0 6.3922 0.0899636 6.14236 0.157973 5.99942L2.05222 2.05176L2.44739 9.55215Z" fill="#01579B"/>
<path d="M9.47344 2.44739L7.42122 0.395172C7.24201 0.214767 6.86879 0 6.55285 0C6.28128 0 6.01473 0.0546463 5.84268 0.157973L2.05371 2.05222L9.47344 2.44739Z" fill="#40C4FF"/>
<path d="M4.89463 11.9998H9.86864V9.86839L6.15794 8.68359L2.76318 9.86839L4.89463 11.9998Z" fill="#40C4FF"/>
<path d="M2.05225 8.44705C2.05225 9.08037 2.13171 9.23572 2.4467 9.55238L2.76241 9.86833H9.86858L6.39532 5.92091L2.05225 2.05176V8.44705Z" fill="#29B6F6"/>
<path d="M8.36879 2.05176H2.05225L9.86858 9.86714H12V4.97259L9.47365 2.44597C9.11857 2.09042 8.80357 2.05176 8.36879 2.05176Z" fill="#01579B"/>
<path opacity="0.2" d="M2.52644 9.63066C2.21073 9.31399 2.13222 9.00163 2.13222 8.44705V2.13098L2.05371 2.05176V8.44705C2.05371 9.00186 2.05371 9.15554 2.52644 9.63089L2.76292 9.86738L2.52644 9.63066Z" fill="white"/>
<path opacity="0.2" d="M11.9215 4.89453V9.78908H9.79004L9.86855 9.86854H12V4.97304L11.9215 4.89453Z" fill="#263238"/>
<path opacity="0.2" d="M9.47344 2.44693C9.08233 2.0551 8.76208 2.05176 8.29007 2.05176H2.05371L2.13222 2.13027H8.29007C8.5256 2.13027 9.12027 2.09065 9.47392 2.44621L9.47344 2.44693Z" fill="white"/>
<path opacity="0.2" d="M11.9215 4.89455L9.47362 2.44739L7.4214 0.395172C7.24219 0.214767 6.86897 0 6.55303 0C6.28146 0 6.01491 0.0546463 5.84286 0.157973L2.05389 2.05222L0.158689 5.99988C0.0909181 6.14377 0 6.39338 0 6.55231C0 6.89713 0.151769 7.24911 0.394217 7.49967L2.28679 9.37817C2.33715 9.43924 2.39076 9.49755 2.44739 9.55285L2.5259 9.63136L2.76215 9.86784L4.81437 11.9201L4.89287 11.9986H9.86593V9.8676H11.9974V4.97305L11.9215 4.89455Z" fill="url(#paint0_radial_1896_4)"/>
</g>
<defs>
<radialGradient id="paint0_radial_1896_4" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(5.99964 5.9994) scale(5.99917)">
<stop stop-color="white" stop-opacity="0.1"/>
<stop offset="1" stop-color="white" stop-opacity="0"/>
</radialGradient>
<clipPath id="clip0_1896_4">
<rect width="12" height="12" fill="white"/>
</clipPath>
</defs>
</svg>
`;

const dashAI = `<svg width="34" height="29" viewBox="0 0 791 669" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_i_82_3)">
<path d="M196.02 364.695C215.26 364.971 227.712 386.012 234.073 438.496C240.434 490.981 250.23 529.811 219.077 547.822C202.637 556.435 195.913 546.915 195.913 546.915C195.913 546.915 197.467 564.153 173.221 570.126C156.032 574.241 139.8 548.025 139.8 548.025C139.8 548.025 125.561 566.352 103.567 566.352C76.0739 566.352 71.3644 523.276 88.9403 471.136C106.516 418.997 148.146 364.005 196.02 364.695Z" fill="#4AC6FA"/>
</g>
<path d="M195.984 367.132L195.985 367.132C204.464 367.254 211.695 371.84 217.725 383.163C223.821 394.611 228.483 412.627 231.654 438.789C232.436 445.241 233.264 451.456 234.06 457.43C236.53 475.965 238.692 492.187 238.207 506.001C237.574 524.035 232.445 537.257 217.901 545.686C210.191 549.714 205.116 549.338 202.133 548.297C200.597 547.761 199.501 547.011 198.803 546.415C198.454 546.117 198.207 545.859 198.057 545.69C197.982 545.606 197.932 545.544 197.907 545.512C197.9 545.503 197.894 545.496 197.891 545.491C197.891 545.491 197.891 545.491 197.891 545.491C197.888 545.488 197.887 545.486 197.887 545.486L192.67 538.101L193.484 547.119L193.484 547.119L193.484 547.124L193.484 547.128C193.485 547.142 193.487 547.171 193.489 547.214C193.493 547.302 193.497 547.447 193.495 547.643C193.491 548.036 193.463 548.63 193.362 549.373C193.159 550.86 192.665 552.92 191.499 555.152C189.214 559.525 184.156 564.92 172.646 567.758C165.399 569.488 157.913 564.854 151.765 558.872C148.78 555.967 146.297 552.924 144.557 550.597C143.689 549.436 143.011 548.462 142.553 547.781C142.324 547.442 142.15 547.176 142.035 546.998C141.978 546.909 141.936 546.842 141.908 546.799L141.879 546.752L141.873 546.742L141.872 546.742L141.872 546.741L141.872 546.741L140.027 543.76L137.877 546.527L137.877 546.527L137.876 546.528L137.875 546.529L137.874 546.531L137.852 546.559C137.83 546.586 137.795 546.629 137.747 546.688C137.651 546.807 137.501 546.987 137.3 547.22C136.897 547.687 136.289 548.365 135.488 549.185C133.884 550.827 131.52 553.022 128.499 555.216C122.438 559.618 113.874 563.914 103.567 563.914C97.4189 563.914 92.6563 561.545 89.0858 557.249C85.4453 552.868 82.9392 546.345 81.7667 537.959C79.4216 521.187 82.5283 497.788 91.25 471.915C99.9464 446.117 114.589 419.646 132.911 399.756C151.262 379.835 173.022 366.802 195.984 367.132Z" stroke="black" stroke-width="4.87487"/>
<g filter="url(#filter1_i_82_3)">
<path d="M630.693 364.695C611.453 364.971 599.001 386.012 592.639 438.496C586.278 490.981 576.483 529.811 607.635 547.822C624.076 556.435 630.8 546.915 630.8 546.915C630.8 546.915 629.246 564.153 653.492 570.126C670.681 574.241 686.913 548.025 686.913 548.025C686.913 548.025 692.076 560.818 714.642 565.698C737.208 570.577 755.348 523.276 737.773 471.136C720.197 418.997 678.567 364.005 630.693 364.695Z" fill="#4AC6FA"/>
</g>
<path d="M630.728 367.132L630.728 367.132C622.249 367.254 615.018 371.84 608.988 383.163C602.892 394.611 598.23 412.627 595.059 438.789C594.277 445.241 593.449 451.456 592.653 457.43C590.183 475.965 588.021 492.187 588.506 506.001C589.139 524.035 594.268 537.257 608.811 545.686C616.521 549.714 621.597 549.338 624.58 548.297C626.116 547.761 627.212 547.011 627.91 546.415C628.259 546.117 628.506 545.859 628.656 545.69C628.731 545.606 628.781 545.544 628.806 545.512C628.813 545.503 628.819 545.496 628.822 545.491C628.822 545.491 628.822 545.491 628.822 545.491C628.824 545.488 628.826 545.486 628.826 545.486L634.043 538.101L633.229 547.119L633.229 547.124L633.229 547.128C633.228 547.142 633.226 547.171 633.224 547.214C633.22 547.302 633.216 547.447 633.218 547.643C633.222 548.036 633.25 548.63 633.351 549.373C633.554 550.86 634.048 552.92 635.214 555.152C637.499 559.525 642.557 564.92 654.067 567.758C661.314 569.488 668.8 564.854 674.948 558.872C677.933 555.967 680.416 552.924 682.156 550.597C683.024 549.436 683.702 548.462 684.16 547.781C684.389 547.442 684.563 547.176 684.677 546.998C684.735 546.909 684.777 546.842 684.805 546.799L684.834 546.752L684.84 546.742L684.84 546.742L684.841 546.741L684.841 546.741L687.373 542.652L689.167 547.097C689.166 547.095 689.166 547.096 689.168 547.1L689.168 547.1C689.171 547.108 689.18 547.127 689.194 547.157C689.221 547.218 689.271 547.323 689.345 547.467C689.494 547.755 689.741 548.2 690.11 548.763C690.848 549.888 692.073 551.485 693.971 553.243C697.753 556.746 704.287 560.965 715.157 563.315C719.8 564.319 724.363 562.718 728.531 558.583C732.744 554.404 736.413 547.737 738.92 539.118C743.926 521.911 744.108 497.561 735.463 471.915C726.767 446.117 712.124 419.646 693.802 399.756C675.451 379.835 653.69 366.802 630.728 367.132Z" stroke="black" stroke-width="4.87487"/>
<g filter="url(#filter2_i_82_3)">
<path d="M442.526 188.301C442.526 188.301 479.321 166.28 465.455 108.599C451.588 50.917 409.923 36.9839 388.061 40.1332C366.199 43.2825 352.925 89.4273 357.13 107.963C334.271 101.387 322.378 122.881 334.309 147.599C346.24 172.317 403.964 209.813 442.526 188.301Z" fill="#4AC6FA"/>
</g>
<path d="M441.047 185.77C422.986 195.814 400.049 192.233 379.681 182.634C369.554 177.862 360.239 171.677 352.747 165.195C345.218 158.681 339.693 152.009 336.949 146.325C331.256 134.53 331.504 124.042 335.222 117.493C337.065 114.248 339.784 111.894 343.227 110.667C346.687 109.434 351.077 109.272 356.32 110.78L361.086 112.151L359.989 107.314C359.049 103.172 359.046 97.2124 360.017 90.401C360.98 83.6391 362.872 76.2519 365.554 69.3382C368.241 62.4084 371.675 56.0773 375.658 51.3401C379.658 46.5823 383.994 43.6807 388.479 43.0347C408.793 40.1084 449.08 53.0249 462.604 109.284C469.361 137.392 463.741 156.539 456.662 168.596C453.102 174.66 449.135 178.994 446.077 181.799C444.549 183.201 443.252 184.218 442.352 184.875C441.902 185.203 441.552 185.441 441.323 185.592C441.209 185.667 441.124 185.721 441.073 185.753C441.063 185.759 441.054 185.765 441.047 185.77Z" stroke="black" stroke-width="5.86292"/>
<g filter="url(#filter3_ii_82_3)">
<path d="M406.905 657.708C549.598 657.708 665.273 542.033 665.273 399.34C665.273 256.647 549.598 140.972 406.905 140.972C264.213 140.972 148.537 256.647 148.537 399.34C148.537 542.033 264.213 657.708 406.905 657.708Z" fill="#EB9FDA"/>
</g>
<path d="M662.836 399.34C662.836 540.686 548.252 655.27 406.905 655.27C265.559 655.27 150.975 540.686 150.975 399.34C150.975 257.994 265.559 143.41 406.905 143.41C548.252 143.41 662.836 257.994 662.836 399.34Z" stroke="black" stroke-width="4.87487"/>
<g filter="url(#filter4_di_82_3)">
<path d="M338.613 200.997C373.553 200.997 399.86 225.32 410.869 243.104C411.208 243.646 411.716 243.342 411.886 242.732C426.424 205.075 470.862 200.285 490.509 200.997C543.38 202.911 569.014 270.763 569.014 270.763C590.763 327.911 568.187 408.688 519.339 423.966C487.699 433.858 437.87 419.799 414.055 393.952C386.785 433.654 303.223 427.579 297.589 427.084C262.11 423.966 228.865 371.698 234.873 307.612C239.68 256.344 284.54 202.792 338.613 200.997Z" fill="#52A4E6"/>
<path d="M412.43 245.577C413.463 245.119 413.971 244.209 414.19 243.53C421.148 225.585 435.217 215.399 450.143 209.756C465.13 204.09 480.805 203.084 490.421 203.433C515.766 204.35 534.794 221.087 547.645 238.068C554.042 246.522 558.824 254.93 562.008 261.23C563.598 264.377 564.785 266.991 565.573 268.811C565.966 269.721 566.26 270.432 566.453 270.912C566.55 271.152 566.622 271.334 566.669 271.454C566.692 271.514 566.709 271.559 566.72 271.587L566.732 271.618L566.734 271.624L566.735 271.625L566.736 271.63C577.392 299.631 577.214 333.548 568.321 362.347C559.408 391.211 541.953 414.339 518.611 421.64C503.387 426.399 483.53 425.444 464.429 420.016C445.339 414.592 427.369 404.805 415.848 392.3L413.777 390.052L412.046 392.572C399.049 411.494 372.316 419.804 347.382 423.176C322.631 426.524 300.532 424.896 297.803 424.656C281.183 423.195 264.588 410.117 252.801 389.022C241.061 368.01 234.339 339.42 237.3 307.84C239.648 282.794 251.806 257.079 270.055 237.41C288.29 217.755 312.43 204.318 338.653 203.434C372.438 203.453 398.057 227.039 408.797 244.387L408.802 244.396C409.077 244.836 409.541 245.351 410.263 245.632C411.029 245.93 411.805 245.855 412.43 245.577Z" stroke="black" stroke-width="4.87487"/>
</g>
<path d="M370.407 326.298C371.032 343.5 366.506 359.16 358.804 370.569C351.1 381.981 340.345 388.997 328.432 389.43C316.52 389.863 305.284 383.647 296.772 372.824C288.261 362.004 282.611 346.714 281.985 329.512C281.36 312.31 285.886 296.65 293.588 285.24C301.292 273.828 312.047 266.813 323.96 266.38C335.873 265.947 347.109 272.163 355.62 282.985C364.131 293.806 369.782 309.096 370.407 326.298Z" fill="#51AF9B" stroke="black" stroke-width="4.87487"/>
<path d="M358.642 328.963C359.644 342.374 356.648 354.716 351.105 363.822C345.559 372.931 337.58 378.651 328.572 379.324C319.563 379.997 310.823 375.526 303.985 367.342C297.15 359.162 292.354 347.402 291.352 333.99C290.349 320.579 293.345 308.237 298.888 299.131C304.434 290.022 312.413 284.302 321.422 283.629C330.43 282.956 339.17 287.426 346.008 295.611C352.843 303.791 357.64 315.551 358.642 328.963Z" fill="#0E2B59" stroke="black" stroke-width="4.36994"/>
<path d="M339.091 345.795C339.621 350.379 338.676 354.602 336.833 357.714C334.992 360.823 332.348 362.706 329.42 363.044C326.493 363.383 323.489 362.153 320.987 359.545C318.483 356.936 316.6 353.04 316.07 348.456C315.54 343.872 316.485 339.649 318.328 336.537C320.169 333.427 322.813 331.545 325.74 331.206C328.668 330.868 331.672 332.098 334.174 334.706C336.678 337.316 338.561 341.211 339.091 345.795Z" fill="white" stroke="black" stroke-width="4.87487"/>
<path d="M527.418 319.89C528.043 337.092 523.517 352.752 515.815 364.162C508.111 375.574 497.356 382.589 485.443 383.022C473.53 383.455 462.294 377.239 453.783 366.416C445.272 355.596 439.621 340.306 438.996 323.104C438.371 305.902 442.897 290.242 450.599 278.833C458.303 267.421 469.058 260.405 480.971 259.972C492.883 259.539 504.119 265.755 512.631 276.578C521.141 287.398 526.792 302.688 527.418 319.89Z" fill="#51AF9B" stroke="black" stroke-width="4.87487"/>
<path d="M515.653 322.555C516.655 335.966 513.659 348.309 508.116 357.414C502.57 366.523 494.591 372.243 485.582 372.916C476.574 373.589 467.834 369.119 460.996 360.935C454.161 352.754 449.364 340.994 448.362 327.583C447.36 314.171 450.356 301.829 455.899 292.723C461.445 283.614 469.424 277.894 478.432 277.221C487.441 276.548 496.181 281.019 503.019 289.203C509.854 297.383 514.651 309.143 515.653 322.555Z" fill="#0E2B59" stroke="black" stroke-width="4.36994"/>
<path d="M496.103 339.386C496.632 343.97 495.687 348.192 493.845 351.304C492.004 354.414 489.359 356.297 486.432 356.635C483.505 356.973 480.501 355.744 477.999 353.136C475.495 350.526 473.611 346.631 473.082 342.047C472.552 337.463 473.497 333.24 475.339 330.128C477.181 327.018 479.825 325.135 482.752 324.797C485.68 324.459 488.683 325.688 491.186 328.296C493.689 330.906 495.573 334.802 496.103 339.386Z" fill="white" stroke="black" stroke-width="4.87487"/>
<g filter="url(#filter5_d_82_3)">
<path d="M260.13 452.51C285.087 452.51 305.32 438.724 305.32 421.717C305.32 404.711 285.087 390.924 260.13 390.924C235.172 390.924 214.94 404.711 214.94 421.717C214.94 438.724 235.172 452.51 260.13 452.51Z" fill="#01B969"/>
<path d="M302.882 421.717C302.882 429.177 298.447 436.206 290.711 441.477C282.988 446.739 272.184 450.073 260.13 450.073C248.076 450.073 237.271 446.739 229.548 441.477C221.813 436.206 217.377 429.177 217.377 421.717C217.377 414.258 221.813 407.229 229.548 401.958C237.271 396.695 248.076 393.362 260.13 393.362C272.184 393.362 282.988 396.695 290.711 401.958C298.447 407.229 302.882 414.258 302.882 421.717Z" stroke="black" stroke-width="4.87487"/>
</g>
<g filter="url(#filter6_d_82_3)">
<path d="M558.129 452.51C583.086 452.51 603.319 438.724 603.319 421.717C603.319 404.711 583.086 390.924 558.129 390.924C533.171 390.924 512.939 404.711 512.939 421.717C512.939 438.724 533.171 452.51 558.129 452.51Z" fill="#01B969"/>
<path d="M600.881 421.717C600.881 429.177 596.446 436.206 588.71 441.477C580.987 446.739 570.183 450.073 558.129 450.073C546.075 450.073 535.27 446.739 527.547 441.477C519.812 436.206 515.376 429.177 515.376 421.717C515.376 414.258 519.812 407.229 527.547 401.958C535.27 396.695 546.075 393.362 558.129 393.362C570.183 393.362 580.987 396.695 588.71 401.958C596.446 407.229 600.881 414.258 600.881 421.717Z" stroke="black" stroke-width="4.87487"/>
</g>
<g filter="url(#filter7_di_82_3)">
<path d="M322.283 483.849C318.896 482.596 253.891 490.982 234.165 538.323C218.144 576.773 258.197 608.817 277.423 621.634C325.126 653.436 425.1 678.427 526.083 625.344C607.655 582.491 525.653 521.616 521.418 514.943C517.184 508.269 496.663 492.187 493.445 495.574C490.227 498.962 473.79 545.257 408.207 552.236C342.624 559.214 327.602 485.949 322.283 483.849Z" fill="#0C1E3A"/>
<path d="M524.95 623.186L524.949 623.186C424.854 675.802 325.832 650.977 278.775 619.606C269.248 613.255 254.712 602.232 244.552 588.164C234.42 574.135 228.85 557.416 236.415 539.26C245.922 516.444 266.416 502.861 285.277 495.118C294.678 491.258 303.582 488.89 310.329 487.566C313.703 486.904 316.516 486.508 318.562 486.315C319.589 486.218 320.395 486.175 320.967 486.172C321.065 486.171 321.153 486.172 321.23 486.173C321.267 486.226 321.309 486.287 321.354 486.358C321.687 486.876 322.1 487.655 322.614 488.729C323.244 490.047 323.949 491.642 324.771 493.502C325.298 494.694 325.873 495.996 326.508 497.404C329.71 504.505 334.213 513.813 340.661 522.861C353.598 541.016 374.513 558.272 408.465 554.66C441.857 551.106 462.873 537.51 475.947 524.271C482.467 517.669 486.984 511.185 490.07 506.149C491.563 503.712 492.723 501.611 493.598 500.026L493.682 499.873C494.13 499.062 494.484 498.424 494.773 497.938C494.864 497.784 494.94 497.662 495.001 497.566C495.015 497.568 495.029 497.57 495.044 497.572C495.582 497.651 496.418 497.916 497.551 498.443C499.785 499.482 502.638 501.279 505.612 503.453C508.568 505.614 511.556 508.083 514.052 510.408C516.593 512.774 518.477 514.856 519.36 516.249C519.788 516.923 520.547 517.732 521.331 518.525C522.172 519.376 523.256 520.417 524.493 521.604L524.669 521.773C527.134 524.137 530.262 527.138 533.645 530.668C540.59 537.917 548.497 547.288 553.753 557.677C559.007 568.059 561.496 579.211 558.038 590.223C554.581 601.231 545.009 612.648 524.95 623.186ZM321.664 486.199C321.664 486.199 321.66 486.198 321.651 486.197C321.66 486.198 321.665 486.199 321.664 486.199ZM321.021 485.904C321.013 485.896 321.008 485.892 321.008 485.891C321.008 485.891 321.013 485.895 321.021 485.904ZM494.705 497.551C494.704 497.55 494.714 497.548 494.737 497.547C494.717 497.551 494.706 497.552 494.705 497.551Z" stroke="black" stroke-width="4.87487"/>
</g>
<path d="M653.896 368.539C656.886 365.61 658.29 360.849 658.29 353.648C658.29 347.789 658.351 340.893 658.412 333.631C658.534 317.641 658.656 299.577 658.29 286.15C657.985 273.212 645.596 269.368 639.554 268.208C640.348 279.071 639.737 291.704 639.066 305.802L638.761 312.759C638.578 316.787 638.456 320.937 638.395 325.148C638.028 340.954 637.723 357.798 632.292 373.788C643.582 373.727 650.234 372.14 653.896 368.539Z" fill="#69E4E4"/>
<path d="M245.493 393.927C278.204 407.293 310.549 400.213 341.369 372.995C364.865 352.245 376.826 344.372 409.416 344.25C442.005 344.372 453.967 352.245 477.463 372.995C508.282 400.213 540.627 407.354 573.339 393.927C610.932 378.548 610.81 339.49 610.749 301.652V296.77C610.749 259.908 608.796 255.697 550.88 251.059C504.62 247.398 436.451 244.895 409.294 243.98C382.319 244.895 314.211 247.398 267.89 251.059C209.974 255.636 208.021 259.847 208.021 296.77V301.652C207.96 339.49 207.899 378.609 245.493 393.927Z" fill="#0C1E3A"/>
<path d="M185.685 312.516C185.868 316.605 185.99 320.755 186.051 325.027C186.722 355.358 187.393 389.779 226.269 412.786C239.573 420.659 254.952 424.687 271.918 424.687C306.399 424.687 339.599 408.148 357.175 391.731C383.601 367.076 405.083 365.794 409.111 365.794H409.538H409.721C413.749 365.794 435.231 367.015 461.656 391.731C479.232 408.148 512.432 424.687 546.913 424.687C563.879 424.687 579.258 420.72 592.563 412.786C631.377 389.779 632.109 355.419 632.781 325.027C632.842 320.755 632.964 316.544 633.147 312.516L633.452 305.559C635.222 269.491 636.381 245.629 616.974 235.925C595.736 225.306 480.575 220.363 409.416 220.363C338.256 220.363 223.095 225.306 201.857 235.925C182.45 245.629 183.61 269.491 185.379 305.559L185.685 312.516ZM202.468 301.714V296.832C202.468 255.027 208.57 250.267 267.524 245.568C313.906 241.906 382.136 239.343 409.355 238.489C436.695 239.404 504.987 241.906 551.368 245.568C610.322 250.267 616.425 255.027 616.425 296.832V301.714C616.486 339.491 616.608 382.333 575.536 399.177C564.123 403.876 552.589 406.195 541.299 406.195C518.291 406.195 495.588 396.431 473.862 377.207C451.037 357.067 440.357 349.988 409.538 349.866C378.718 349.988 367.977 357.006 345.214 377.207C312.807 405.89 278.204 413.336 243.479 399.116C202.284 382.333 202.406 339.491 202.468 301.714Z" fill="#FF6E6F"/>
<path d="M160.541 353.649C160.541 360.85 161.945 365.611 164.935 368.54C168.597 372.141 175.188 373.728 186.539 373.789C181.169 357.799 180.802 340.955 180.436 325.149C180.375 320.938 180.253 316.788 180.07 312.76L179.765 305.803C179.094 291.644 178.483 279.011 179.277 268.148C173.235 269.307 160.846 273.152 160.541 286.09C160.236 299.517 160.358 317.581 160.419 333.571C160.48 340.955 160.541 347.851 160.541 353.649Z" fill="#69E4E4"/>
<path d="M154.926 353.65C154.926 362.499 156.879 368.479 161.029 372.568C165.972 377.39 173.662 379.404 187.21 379.404C187.698 379.404 188.186 379.404 188.675 379.404C194.595 393.501 204.969 406.683 223.461 417.608C237.681 426.029 253.975 430.24 271.979 430.24C307.986 430.24 342.65 412.908 361.02 395.759C386.408 372.08 406.852 371.348 409.293 371.348C409.354 371.348 409.659 371.348 409.72 371.348C411.979 371.348 432.423 372.019 457.872 395.759C476.242 412.908 510.906 430.24 546.913 430.24C564.916 430.24 581.211 425.968 595.431 417.608C613.861 406.683 624.236 393.501 630.217 379.404C630.705 379.404 631.193 379.404 631.682 379.404C645.23 379.404 652.92 377.329 657.863 372.568C662.013 368.479 663.966 362.499 663.966 353.65C663.966 347.852 664.027 340.956 664.088 333.632C664.21 317.643 664.332 299.456 663.966 285.969C663.6 269.796 648.648 263.693 639.066 262.351C637.174 247.826 631.926 237.024 619.537 230.86C595.125 218.654 467.515 214.748 409.476 214.748C351.438 214.748 223.766 218.715 199.355 230.921C186.966 237.146 181.778 247.887 179.826 262.412C170.244 263.754 155.292 269.857 154.926 286.03C154.621 299.517 154.743 317.643 154.804 333.693C154.865 340.956 154.926 347.852 154.926 353.65ZM638.7 312.76L639.005 305.803C639.676 291.644 640.287 279.011 639.493 268.209C645.535 269.369 657.924 273.214 658.229 286.152C658.534 299.578 658.412 317.643 658.351 333.632C658.29 340.956 658.229 347.852 658.229 353.65C658.229 360.851 656.825 365.611 653.835 368.54C650.173 372.141 643.582 373.728 632.231 373.789C637.601 357.799 637.968 340.956 638.334 325.149C638.456 320.938 638.517 316.788 638.7 312.76ZM201.857 235.925C223.095 225.306 338.256 220.363 409.415 220.363C480.575 220.363 595.736 225.306 616.974 235.925C636.381 245.629 635.221 269.491 633.451 305.559L633.146 312.516C632.963 316.605 632.841 320.755 632.78 325.027C632.109 355.358 631.376 389.778 592.562 412.786C579.258 420.659 563.879 424.687 546.913 424.687C512.432 424.687 479.232 408.148 461.656 391.731C435.23 367.076 413.748 365.794 409.72 365.794H409.537H409.11C405.082 365.794 383.6 367.015 357.175 391.731C339.599 408.148 306.399 424.687 271.918 424.687C254.952 424.687 239.573 420.72 226.268 412.786C187.454 389.778 186.722 355.419 186.05 325.027C185.989 320.755 185.867 316.605 185.684 312.516L185.379 305.559C183.609 269.491 182.45 245.629 201.857 235.925ZM160.541 286.152C160.846 273.214 173.234 269.369 179.276 268.209C178.483 279.072 179.093 291.705 179.765 305.864L180.07 312.821C180.253 316.849 180.314 320.999 180.436 325.21C180.741 341.017 181.107 357.922 186.539 373.85C175.187 373.789 168.596 372.202 164.935 368.602C161.944 365.672 160.541 360.912 160.541 353.711C160.541 347.852 160.479 340.956 160.418 333.693C160.296 317.643 160.174 299.578 160.541 286.152Z" fill="#4E4039"/>
<path d="M243.356 399.116C278.082 413.336 312.685 405.829 345.091 377.207C367.916 357.067 378.596 349.988 409.415 349.866C440.235 349.988 450.915 357.006 473.74 377.207C495.466 396.431 518.168 406.195 541.176 406.195C552.467 406.195 564.001 403.815 575.413 399.177C616.486 382.394 616.364 339.552 616.303 301.714V296.832C616.303 255.027 610.2 250.267 551.246 245.568C504.864 241.906 436.634 239.343 409.232 238.489C382.075 239.404 313.845 241.906 267.402 245.568C208.448 250.267 202.345 255.027 202.345 296.832V301.714C202.406 339.491 202.284 382.333 243.356 399.116ZM208.082 301.714V296.832C208.082 259.971 210.035 255.76 267.951 251.121C314.211 247.46 382.38 244.958 409.354 244.042C436.512 244.958 504.62 247.46 550.941 251.121C608.857 255.699 610.81 259.91 610.81 296.832V301.714C610.871 339.491 610.993 378.61 573.399 393.99C540.688 407.355 508.282 400.275 477.523 373.057C454.027 352.307 442.066 344.434 409.476 344.312C376.887 344.434 364.926 352.307 341.43 373.057C310.61 400.275 278.265 407.416 245.554 393.99C207.899 378.61 207.96 339.491 208.082 301.714Z" fill="#4E4039"/>
<path d="M240.122 374.215C233.897 365.549 229.503 356.334 226.695 346.081C223.583 334.668 223.827 323.012 224.437 311.233C224.62 307.084 217.785 307.145 217.602 311.295C216.992 323.256 216.992 334.852 219.799 346.569C222.545 357.92 227.489 368.539 234.568 377.755C236.765 380.623 242.38 377.328 240.122 374.215Z" fill="white"/>
<path d="M267.34 387.581C262.275 387.825 258.247 385.567 253.975 383.126C250.313 381.051 246.591 386.177 250.374 388.374C255.989 391.609 261.36 394.355 268.073 393.928C271.918 393.623 271.063 387.398 267.34 387.581Z" fill="white"/>
<path d="M170.183 326.002C169.878 315.81 170.122 305.557 170.122 295.304C170.122 291.154 163.287 290.91 163.287 295.121C163.287 315.383 164.263 335.583 164.324 355.845C164.324 359.934 171.038 359.384 171.099 355.234C171.221 345.47 170.488 335.766 170.183 326.002Z" fill="white"/>
<path d="M435.906 429.28L435.9 429.283C429.247 432.965 420.975 435.775 413.698 433.641L413.698 433.64C406.052 431.4 398.713 426.832 393.637 420.907C388.965 415.453 386.27 408.931 386.874 402.032C421.167 412.849 448.167 405.39 460.889 401.876C460.987 401.848 461.085 401.821 461.182 401.795C461.442 401.744 461.712 401.774 461.955 401.882C462.207 401.994 462.416 402.185 462.552 402.425C462.688 402.665 462.743 402.943 462.71 403.217L464.217 403.403L462.71 403.217C462.676 403.491 462.555 403.747 462.365 403.947L462.316 403.998L462.273 404.054C459.242 407.904 455.364 412.578 451.952 416.451C447.389 421.626 441.959 425.967 435.906 429.28Z" fill="#6D4F45" stroke="black" stroke-width="3.03842"/>
<path d="M428.848 366.837L428.849 366.837C445.549 366.482 459.871 369.464 470.415 373.792C475.689 375.956 479.986 378.444 483.157 380.992C486.132 383.382 488.023 385.75 488.88 387.871C488.683 388.102 488.352 388.425 487.853 388.832C486.717 389.758 484.916 390.954 482.474 392.286C477.602 394.943 470.32 398.064 461.049 400.61C442.741 405.637 416.74 408.403 386.299 400.97C386.268 399.134 386.252 397.089 387.034 394.329C387.99 390.957 390.17 386.456 395.18 380.274C404.922 368.253 417.447 367.068 428.848 366.837Z" fill="#593E3B" stroke="black" stroke-width="3.03842"/>
<path d="M344.68 273.919H472.509" stroke="#4AC6FA" stroke-width="6.84796" stroke-linecap="round"/>
<path d="M488.488 273.919H515.88" stroke="#13CE7D" stroke-width="6.84796" stroke-linecap="round"/>
<path d="M433.705 292.18H504.467" stroke="#13CE7D" stroke-width="6.84796" stroke-linecap="round"/>
<path d="M454.248 310.441H522.728" stroke="#4AC6FA" stroke-width="6.84796" stroke-linecap="round"/>
<path d="M404.03 328.703H472.509" stroke="#13CE7D" stroke-width="6.84796" stroke-linecap="round"/>
<path d="M344.68 292.18H420.008" stroke="#4AC6FA" stroke-width="6.84796" stroke-linecap="round"/>
<path d="M344.68 310.441H438.269" stroke="#13CE7D" stroke-width="6.84796" stroke-linecap="round"/>
<path d="M344.68 328.703H392.616" stroke="#4AC6FA" stroke-width="6.84796" stroke-linecap="round"/>
<rect x="328.702" y="269.354" width="9.13062" height="9.13062" fill="white"/>
<rect x="328.702" y="287.615" width="9.13062" height="9.13062" fill="white"/>
<rect x="328.702" y="305.876" width="9.13062" height="9.13062" fill="white"/>
<rect x="328.702" y="324.138" width="9.13062" height="9.13062" fill="white"/>
<defs>
<filter id="filter0_i_82_3" x="78.5745" y="364.689" width="165.342" height="226.063" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="3.20429" dy="25.6343"/>
<feGaussianBlur stdDeviation="10.0935"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="shape" result="effect1_innerShadow_82_3"/>
</filter>
<filter id="filter1_i_82_3" x="586" y="364.689" width="162.027" height="226.063" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="3.20429" dy="25.6343"/>
<feGaussianBlur stdDeviation="10.0935"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="shape" result="effect1_innerShadow_82_3"/>
</filter>
<filter id="filter2_i_82_3" x="329.602" y="39.7166" width="145.384" height="168.774" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="6.40858" dy="19.2257"/>
<feGaussianBlur stdDeviation="6.88923"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="shape" result="effect1_innerShadow_82_3"/>
</filter>
<filter id="filter3_ii_82_3" x="135.72" y="121.746" width="542.37" height="555.187" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="12.8172" dy="19.2257"/>
<feGaussianBlur stdDeviation="11.4133"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/>
<feBlend mode="normal" in2="shape" result="effect1_innerShadow_82_3"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="-12.8172" dy="-19.2257"/>
<feGaussianBlur stdDeviation="11.4133"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/>
<feBlend mode="normal" in2="effect1_innerShadow_82_3" result="effect2_innerShadow_82_3"/>
</filter>
<filter id="filter4_di_82_3" x="222.31" y="200.934" width="366.852" height="251.439" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="12.8172"/>
<feGaussianBlur stdDeviation="5.92794"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_82_3"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_82_3" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="12.8172"/>
<feGaussianBlur stdDeviation="9.29245"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0"/>
<feBlend mode="normal" in2="shape" result="effect2_innerShadow_82_3"/>
</filter>
<filter id="filter5_d_82_3" x="195.714" y="378.107" width="128.831" height="100.037" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="6.40858"/>
<feGaussianBlur stdDeviation="9.61287"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_82_3"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_82_3" result="shape"/>
</filter>
<filter id="filter6_d_82_3" x="493.713" y="378.107" width="128.831" height="100.037" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="6.40858"/>
<feGaussianBlur stdDeviation="9.61287"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_82_3"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_82_3" result="shape"/>
</filter>
<filter id="filter7_di_82_3" x="211.241" y="458.1" width="370.058" height="219.24" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="-6.40858"/>
<feGaussianBlur stdDeviation="9.61287"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_82_3"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_82_3" result="shape"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="22.43"/>
<feGaussianBlur stdDeviation="10.5742"/>
<feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0"/>
<feBlend mode="normal" in2="shape" result="effect2_innerShadow_82_3"/>
</filter>
</defs>
</svg>
`;

//getting vscode theme
const activityBarBackground = getComputedStyle(document.documentElement).getPropertyValue("--vscode-activityBar-background");
const activityBarForeground = getComputedStyle(document.documentElement).getPropertyValue("--vscode-activityBar-foreground");

//initialising elements
const googleApiKeyTextInput = document.getElementById("google-api-key-text-input");
const googleApiKeyHeader = document.getElementById("google-api-key-header");
const validationList = document.getElementById("validation-list");
const bodyContainer = document.getElementById("body-container");
const bottomContainer = document.getElementById("bottom-container");
const sendButton = document.getElementById("send-chat");
const textInput = document.getElementById("text-input");
const responseContainer = document.getElementById("response");
const onboardingText = document.getElementById("onboarding-text");
const onboardingArrowIcon = document.getElementById("onboarding-arrow-icon");
const tryFlutterText = document.getElementById("try-flutter-text");
const textinputMenu = document.getElementById("menu");
const loadingIndicator = document.getElementById('loader');
const validationLoadingIndicator = document.getElementById('validation-loader');
const workspaceLoader = document.getElementById('workspace-loader');
const workspaceLoaderText = document.getElementById('workspace-loader-text');
const fileNameContainer = document.getElementById("file-names");
const textInputContainer = document.getElementById("text-input-container");
const header = document.getElementById("header");
const chips = document.getElementById("chips");
const codeSnippetButton = document.getElementById("code-snippets");

//initialising variables
let isApiKeyValid = false;
let areDependenciesInstalled = false;
let conversationHistory = [];
let chipsData = {};
let stepOneCompleted = false;
let onboardingCompleted = false;
let activeAgent;
let commandEnable = false;
let shortCutHints = '';

//initialising visual studio code library
let vscode = null;

const properties = [
    'direction',
    'boxSizing',
    'width',
    'height',
    'overflowX',
    'overflowY',

    'borderTopWidth',
    'borderRightWidth',
    'borderBottomWidth',
    'borderLeftWidth',
    'borderStyle',

    'paddingTop',
    'paddingRight',
    'paddingBottom',
    'paddingLeft',

    'fontStyle',
    'fontVariant',
    'fontWeight',
    'fontStretch',
    'fontSize',
    'fontSizeAdjust',
    'lineHeight',
    'fontFamily',

    'textAlign',
    'textTransform',
    'textIndent',
    'textDecoration',

    'letterSpacing',
    'wordSpacing',

    'tabSize',
    'MozTabSize',
];

let agents = ['workspace'];
const commands = ['refactor'];

// Add your additional commands and agents
const agentCommandsMap = {};

//description for commands and agents
const description = {
    'refactor': 'Refactor code with instructions',
    'workspace': 'Ask questions across your workspace'
};

const commandsExecution = {
    'refactor': {
        'exe': (input) => {
            commandEnable = true;
            input.textContent = '';

            let isChipsFocused = false;
            let isTextRefactorInputFocused = false;

            const command = document.createElement('span');
            const textRefactorInput = document.createElement('span');
            const refactor = document.createElement('span');
            const referenceText = document.createElement('span');
            const refactorTextNode = document.createElement('span');
            const referenceIdSpan = document.createElement('span');

            referenceIdSpan.id = "reference-id";
            referenceIdSpan.contentEditable = "false";
            referenceIdSpan.appendChild(document.createTextNode('\u00A0'));

            refactorTextNode.textContent = "/refactor\u00A0";
            refactorTextNode.classList.add("text-pink-400");

            referenceText.id = "add-reference-text";
            referenceText.contentEditable = "false";
            referenceText.tabIndex = 0;
            referenceText.classList.add("mb-1", "px-[7px]", "inline-block", "cursor-pointer", "rounded-[4px]", "mt-1");
            referenceText.textContent = "Code Attachment";
            referenceText.addEventListener("click", function (event) {
                isChipsFocused = !isChipsFocused;
                isChipsFocused ? referenceText.classList.add("border-[#497BEF]") : referenceText.classList.remove("border-[#497BEF]");
                if (isChipsFocused) {
                    isTextRefactorInputFocused = false;
                }
            });

            command.id = "command-span";
            command.appendChild(refactorTextNode);
            command.appendChild(referenceText);
            command.appendChild(referenceIdSpan);

            refactor.id = "text-refactor-container";
            refactor.innerHTML = `<span id="text-to-refactor-span" contenteditable="false" class="bg-black text-white px-[7px] border border-black rounded-tl-[4px] rounded-bl-[4px] inline-block">Refactor Instructions</span>`;
            refactor.classList.add("inline-block");

            textRefactorInput.id = "text-refactor-input";
            textRefactorInput.contentEditable = "true";
            textRefactorInput.tabIndex = "0";
            textRefactorInput.classList.add("px-2", "inline-block", "rounded-tr-[4px]", "rounded-br-[4px]");
            textRefactorInput.addEventListener("focus", function (event) {
                if (isTextRefactorInputFocused) {
                    isChipsFocused = false;
                }
                referenceText.classList.remove("border-[#497BEF]");
                isTextRefactorInputFocused = !isTextRefactorInputFocused;
            });

            textRefactorInput.appendChild(document.createTextNode("\u00A0"));

            refactor.appendChild(textRefactorInput);
            command.appendChild(refactor);
            input.appendChild(command);

            setCaretToEnd(textRefactorInput);
            //TODO[YASH]: Use platform specific shortcut naming. checkout shortcut-hint-utils
            tippy('#add-reference-text', {
                content: `Use ${shortCutHints} to attach selected code in editor`,
                theme: "flutter-blue"
            });

            input.addEventListener('keydown', function (event) {
                let keyCaught = false;
                switch (event.key) {
                    case "Tab":
                        if (isTextRefactorInputFocused) {
                            isTextRefactorInputFocused = false;
                            isChipsFocused = true;
                            referenceText.classList.add("border-[#497BEF]");
                            textRefactorInput.blur();
                        } else {
                            isChipsFocused = false;
                            isTextRefactorInputFocused = true;
                            textRefactorInput.focus();
                            setCaretToEnd(textRefactorInput);
                        }
                        keyCaught = true;
                        break;

                    case "Backspace":
                        if (textRefactorInput.textContent.trim() === "" && textRefactorInput.innerText.trim() === "") {
                            // Clear the text
                            input.removeChild(command);
                            setTimeout(() => {
                                input.focus();
                                adjustHeight();
                            }, 0);
                        }
                        break;
                }
                if (keyCaught) {
                    event.preventDefault();
                }
            });

            setTimeout(() => {
                adjustHeight();
                referenceText.focus();
            }, 0);

        }
    }
};

// Concatenate agent-specific commands to the agents array
agents = agents.concat(
    Object.entries(agentCommandsMap).map(([agent, cmds]) => cmds.map(cmd => `${agent} /${cmd}`)).flat()
);

function getCaretCoordinates(element, position) {
    const div = document.createElement('div');
    document.body.appendChild(div);

    const style = div.style;
    const computed = getComputedStyle(element);

    style.whiteSpace = 'pre-wrap';
    style.wordBreak = 'break-word';
    style.position = 'absolute';
    style.visibility = 'hidden';
    style.overflow = 'hidden';

    properties.forEach(prop => {
        style[prop] = computed[prop];
    });

    div.textContent = element.textContent.substring(0, position);

    const span = document.createElement('span');
    span.textContent = element.textContent.substring(position) || '.';
    div.appendChild(span);

    const coordinates = {
        top: span.offsetTop + parseInt(computed['borderTopWidth']),
        left: span.offsetLeft + parseInt(computed['borderLeftWidth']),
        // height: parseInt(computed['lineHeight'])
        height: span.offsetHeight
    };

    div.remove();

    return coordinates;
}

class CommandDeck {
    constructor(ref, menuRef, resolveFn, replaceFn, menuItemFn) {
        this.ref = ref;
        this.menuRef = menuRef;
        this.resolveFn = resolveFn;
        this.replaceFn = replaceFn;
        this.menuItemFn = menuItemFn;
        this.options = [];

        this.makeOptions = this.makeOptions.bind(this);
        this.closeMenu = this.closeMenu.bind(this);
        this.selectItem = this.selectItem.bind(this);
        this.onInput = this.onInput.bind(this);
        this.onKeyDown = this.onKeyDown.bind(this);
        this.renderMenu = this.renderMenu.bind(this);

        this.ref.addEventListener('input', this.onInput);
        this.ref.addEventListener('keydown', this.onKeyDown);
    }

    async makeOptions(query) {
        let options = [];
        if (query.startsWith('@')) {
            options = await this.resolveFn(query.slice(1), 'at');
        } else if (query.startsWith('/')) {
            options = await this.resolveFn(query.slice(1), 'slash');
        }
        if (options.length !== 0) {
            this.options = options;
            this.renderMenu();
        } else {
            this.closeMenu();
        }
    }

    closeMenu() {
        setTimeout(() => {
            this.options = [];
            this.left = undefined;
            this.top = undefined;
            this.triggerIdx = undefined;
            this.renderMenu();
        }, 0);
    }

    selectItem(active) {
        return () => {
            const option = this.options[active];

            const isSlashOptionAvailable = commandsExecution.hasOwnProperty(option);

            if (isSlashOptionAvailable) {
                commandsExecution[option].exe(this.ref);
            } else {
                const trigger = this.ref.textContent[this.triggerIdx];
                this.ref.textContent = "";
                const mentionNode = document.createElement("span");
                mentionNode.id = "special-commands";
                mentionNode.classList.add("text-blue-500", "inline-block");
                mentionNode.contentEditable = false;
                mentionNode.textContent = `${trigger}${option}\u200B`;
                this.ref.appendChild(mentionNode);
                this.ref.appendChild(document.createTextNode("\u00A0"));
                setCaretToEnd(this.ref);
            }

            this.ref.focus();
            this.closeMenu();
        };
    }

    onInput(ev) {
        const positionIndex = this.ref.selectionStart;
        const textBeforeCaret = this.ref.textContent.slice(0, positionIndex);
        const tokens = textBeforeCaret.split(/\s/);
        const lastToken = tokens[tokens.length - 1];
        const triggerIdx = textBeforeCaret.endsWith(lastToken)
            ? textBeforeCaret.length - lastToken.length
            : -1;
        const maybeTrigger = textBeforeCaret[triggerIdx];
        const keystrokeTriggered = maybeTrigger === '@' || maybeTrigger === '/';

        this.ref.style.height = "auto";
        this.ref.style.height = this.ref.scrollHeight + "px";

        const isTriggerAtStartOfWord = triggerIdx === 0;

        if (!keystrokeTriggered || !isTriggerAtStartOfWord) {
            this.closeMenu();
            return;
        }

        const query = textBeforeCaret.slice(triggerIdx);
        this.makeOptions(query);

        const coords = getCaretCoordinates(this.ref, positionIndex);
        const { top, left } = this.ref.getBoundingClientRect();

        const savedCaretPosition = positionIndex;

        setTimeout(() => {
            this.active = 0;
            this.left = window.scrollX + coords.left + left + this.ref.scrollLeft;
            this.top = window.scrollY + coords.top + top + coords.height - this.ref.scrollTop;
            this.triggerIdx = triggerIdx;

            this.renderMenu();

            this.ref.selectionStart = this.ref.selectionEnd = savedCaretPosition;
        }, 0);
    }

    onKeyDown(ev) {
        let keyCaught = false;
        if (this.triggerIdx !== undefined) {
            switch (ev.key) {
                case 'ArrowDown':
                    this.active = Math.min(this.active + 1, this.options.length - 1);
                    this.renderMenu();
                    keyCaught = true;
                    break;
                case 'ArrowUp':
                    this.active = Math.max(this.active - 1, 0);
                    this.renderMenu();
                    keyCaught = true;
                    break;
                case 'Enter':
                case 'Tab':
                    this.selectItem(this.active)();
                    keyCaught = true;
                    break;
                case 'Backspace':
                    const selection = window.getSelection();
                    const range = selection.getRangeAt(0);
                    const mentionNode = document.getElementById("special-commands");

                    if (mentionNode) {
                        const prevNode = mentionNode.previousSibling;
                        const nextNode = mentionNode.nextSibling;
                        this.ref.removeChild(mentionNode);

                        // Restore the cursor position 
                        range.setStartAfter(prevNode || nextNode);
                        range.collapse(true);
                        selection.removeAllRanges();
                        selection.addRange(range);
                    }
                    break;
            }
        }

        if (keyCaught) {
            ev.preventDefault();
        }
    }

    renderMenu() {
        if (this.top === undefined) {
            this.menuRef.hidden = true;
            return;
        }

        const caretHeight = this.ref.offsetHeight;
        this.menuRef.style.left = this.left + 'px';
        this.menuRef.style.top = (this.top - this.menuRef.offsetHeight - caretHeight) + 'px';
        this.menuRef.innerHTML = '';
        this.menuRef.classList.add("p-1");

        this.options.forEach((option, idx) => {
            const trigger = this.ref.textContent[this.triggerIdx];
            this.menuRef.appendChild(this.menuItemFn(
                option,
                this.selectItem(idx),
                this.active === idx,
                trigger));
        });

        this.menuRef.hidden = false;
    }
}

(function () {
    //initialising vscode library
    vscode = acquireVsCodeApi();

    //check if key exists
    ifKeyExists();

    //reading vscode triggered messages to webview
    readTriggeredMessage();

    if (!onboardingCompleted) {
        textInput.textContent = 'How to wait for forEach to complete with asynchronous callbacks?';
    }

    googleApiKeyTextInput.addEventListener("input", (event) => {
        const apiKey = event.target.value.trim();
        const debouncedFunction = debounce(validateApiKey, 700);
        debouncedFunction(apiKey);
    });

    sendButton.addEventListener("click", (event) => {
        submitResponse();
    });

    textInput.addEventListener("paste", (event) => {
        event.preventDefault();
        const pastedText = event.clipboardData.getData('text/plain');
        event.target.textContent = pastedText;
    });

    // event listeners for text input
    textInput.addEventListener("keydown", handleSubmit);
    textInput.addEventListener("focus", removePlaceholder);
    textInput.addEventListener("blur", addPlaceholder);
    textInput.addEventListener("dragover", dragOver);
    textInput.addEventListener("drop", drop);


})();


function addToolTipsById() {

    tippy('#agents', {
        content: "Specialized agents",
        theme: "flutter-blue"
    });

    tippy('#slash-commands', {
        content: "Slash commands",
        theme: "flutter-blue"
    });

    tippy('#dart-add-reference', {
        content: `Use 'Attach Snippet to Dash' or ${shortCutHints} after selecting the code in editor`,
        theme: "flutter-blue"
    });
}

function submitResponse() {

    const textRefactor = document.getElementById("text-to-refactor-span");
    if (textRefactor) {
        textRefactor.remove();
    }
    let prompt = textInput.textContent;
    if (!prompt.startsWith('/')) {
        for (const chip in chipsData) {
            if (prompt.includes(chip)) {
                prompt = prompt.replace(chip, chipsData[chip].referenceContent);
            }
        }
    }
    if (!prompt.startsWith('/') && prompt.length > 0) {
        vscode.postMessage({ type: "prompt", value: prompt });
    } else {
        const chipId = [];
        const instructions = prompt;
        for (const chip in chipsData) {
            if (prompt.includes(chip)) {
                prompt = prompt.replace(chip, chipsData[chip].referenceContent);
                chipId.push(chip);
            }
        }

        if (chipId.length > 0) {
            vscode.postMessage({
                type: "action",
                value: JSON.stringify({
                    'message': prompt,
                    'chipsData': chipsData,
                    'chipId': chipId,
                    'instructions': instructions
                }),
            });
        }        

        if (commandEnable) {
            commandEnable = false;
        }
    }
    textInput.textContent = "";
    adjustHeight();
}

function handleSubmit(event) {
    const resolveFn = async (query, type) => {
        // Array to store possible matches
        let matchingItems = [];

        // When triggered with @
        if (type === 'at') {
            if (query.length === 0) {
                matchingItems = agents;
            } else {
                matchingItems = agents.filter(item => item.toLowerCase().startsWith(query.toLowerCase()));
            }
        }

        // When triggered with /
        else if (type === 'slash') {
            // If no agent selected yet
            if (!activeAgent) {
                matchingItems = query.length === 0 ? commands : commands.filter(item => item.toLowerCase().startsWith(query.toLowerCase()));
            }
            // If there is an active agent
            else {
                matchingItems = query.length === 0
                    ? agentCommandsMap[activeAgent]
                    : agentCommandsMap[activeAgent].filter(item => item.toLowerCase().startsWith(query.toLowerCase()));
            }
        }

        return matchingItems;
    };

    const replaceFn = (action, trigger) => `${trigger}${action} `;

    const menuItemFn = (action, setItem, selected, trigger) => {
        const div = document.createElement('div');
        div.setAttribute('role', 'option');
        div.className = `menu-item ${trigger === '@' ? 'text-blue-500' : 'text-rose-500'}`;
        if (selected) {
            div.classList.add('selected');
            div.setAttribute('aria-selected', '');
        }
        div.textContent = `${trigger}${action} - ${description[action]}`;
        div.onclick = setItem;
        return div;
    };

    const commandDeck = new CommandDeck(
        textInput,
        textinputMenu,
        resolveFn,
        replaceFn,
        menuItemFn
    );

    if (event.key === "Enter" && !event.shiftKey && commandDeck.menuRef?.hidden) {
        event.preventDefault();
        submitResponse();
    }

    if (event.key === "Backspace") {
        const selection = window.getSelection();
        const range = selection.getRangeAt(0);

        // Check if the cursor is at the beginning of the textInput
        if (range.startContainer === textInput && range.startOffset === 0) {
            // Remove the last chip if it exists
            const chips = textInput.querySelectorAll(".chip");
            if (chips.length > 0) {
                const lastChip = chips[chips.length - 1];
                lastChip.parentNode.removeChild(lastChip);
            }
        }

        setTimeout(() => {
            if (textInput.textContent.trim().length === 0) {
                // Perform some action
                commandEnable = false;
            }
        }, 500);

    }

    const target = event.target;
    if (target.tagName === "SPAN") {
        // Redirect editing focus to the parent p tag
        target.parentNode.focus();
    }
}

function ifKeyExists() {
    vscode.postMessage({
        type: "checkKeyIfExists",
    });
}

function setCaretToEnd(target) {
    const range = document.createRange();
    const sel = window.getSelection();
    range.selectNodeContents(target);
    range.collapse(false);
    sel.removeAllRanges();
    sel.addRange(range);
    target.focus();
    range.detach(); // optimization

    // set scroll to the end if multiline
    target.scrollTop = target.scrollHeight;
}

function removePlaceholder() {
    if (textInput.textContent.trim() === "# Ask Dash AI") {
        textInput.textContent = '';
        textInput.classList.remove('placeholder');
    }
}

// Function to add placeholder when the element is blurred and empty
function addPlaceholder() {
    if (textInput.textContent.trim() === '') {
        textInput.textContent = '# Ask Dash AI';
        textInput.classList.add('placeholder');
    }
}

function readTriggeredMessage() {
    window.addEventListener("message", (event) => {
        const message = event.data;
        switch (message.type) {
            case "apiKeyValidation":
            case "dependencyValidation":
                updateValidationList(message);
                break;
            case "displayMessages":
                conversationHistory = message.value;
                displayMessages(conversationHistory);
                header.classList.add("hidden");
                scrollToBottom();
                break;
            case "showLoadingIndicator":
                sendButton.classList.remove("cursor-pointer");
                sendButton.classList.add("cursor-not-allowed");
                loadingIndicator.classList.add("block");
                loadingIndicator.classList.remove("hidden");
                sendButton.classList.add("disabled");
                textInput.removeEventListener("keydown", handleSubmit);
                textInput.textContent = "";
                break;
            case "hideLoadingIndicator":
                sendButton.classList.add("cursor-pointer");
                sendButton.classList.remove("cursor-not-allowed");
                loadingIndicator.classList.add("hidden");
                loadingIndicator.classList.remove("block");
                sendButton.classList.remove("disabled");
                textInput.addEventListener("keydown", handleSubmit);
                break;
            case "showValidationLoader":
                validationLoadingIndicator.classList.add("block");
                validationLoadingIndicator.classList.remove("hidden");
                break;
            case "hideValidationLoader":
                validationLoadingIndicator.classList.add("hidden");
                validationLoadingIndicator.classList.remove("block");
                break;
            case "keyExists":
                onboardingCompleted = true;
                stepOneCompleted = true;
                modelCount = 3;
                googleApiKeyHeader.classList.add("hidden");
                bottomContainer.classList.remove("hidden");
                bottomContainer.classList.add("flex");
                textInput.textContent = "";
                textInput.contentEditable = true;
                onboardingArrowIcon.classList.add("hidden");
                onboardingText.classList.add("hidden");
                tryFlutterText.classList.add("hidden");
                break;
            case 'workspaceLoader':
                workspaceLoader.style.display = message.value ? 'flex' : 'none';
                if (message.value) {
                    workspaceLoader.classList.remove("animate__slideOutDown");
                    workspaceLoader.classList.add("animate__slideInUp");
                    sendButton.classList.add("disabled");
                    textInput.removeEventListener("keydown", handleSubmit);
                } else {
                    workspaceLoader.classList.remove("animate__slideInUp");
                    workspaceLoader.classList.add("animate__slideOutDown");
                    sendButton.classList.remove("disabled");
                    textInput.addEventListener("keydown", handleSubmit);
                }
                if (!message.value) {
                    fileNameContainer.innerHTML = '';
                    workspaceLoaderText.textContent = "Finding the most relevant files";
                }
                break;
            case 'stepLoader':
                if (message.value?.fetchingFileLoader) {
                    workspaceLoaderText.textContent = "Finding most relevant files\n(this may take a while for first time)";
                } else if (message.value?.creatingResultLoader) {
                    fileNameContainer.style.display = "inline-flex";
                    workspaceLoaderText.textContent = "Preparing a result";
                    message.value?.filePaths?.forEach((_filePath) => {
                        const divBlock = document.createElement("div");
                        divBlock.classList.add("inline-flex", "flex-row", "items-center", "mt-2");
                        divBlock.id = "divBlock";
                        const fileNames = document.createElement("span");
                        const _dartIcon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                        _dartIcon.innerHTML = dartIcon;
                        _dartIcon.classList.add("h-3", "w-3", "mx-1");
                        _dartIcon.id = "dartIcon";
                        fileNames.textContent = _filePath;
                        fileNames.classList.add("file-path");
                        fileNames.id = "fileNames";
                        divBlock.appendChild(_dartIcon);
                        divBlock.appendChild(fileNames);
                        fileNameContainer.appendChild(divBlock);
                    });
                }
                break;
            case 'clearCommandDeck':
                clearChat();
                break;

            case 'profileCommandDeck':
                gotoProfile();
                break;

            case 'addToReference':
                removePlaceholder();
                createReferenceChips(JSON.parse(message.value));
                setTimeout(() =>
                    adjustHeight(),
                0);
                break;
            case 'setInput':
                textInput.textContent = message.value;
                if (message.value.startsWith('/')) {
                    const action = message.value.split(' ')[0].slice(1);
                    commandsExecution[action].exe(textInput);
                }
                break;
            case 'shortCutHints':
                debugger;
                shortCutHints = message.value;
                //adding tooltips to the elements
                addToolTipsById();
                break;
        }
    });
}

function createReferenceChips(references) {

    const chip = document.createElement("span");
    const chipId = `${truncateText(references.fileName)}:[${references.startLineNumber} - ${references.endLineNumber}]`;
    references.chipId = chipId;
    if (document.getElementById(chipId)) {
        return;
    }

    chip.innerHTML = `${dartIcon}<span class="ml-1">${truncateText(references.fileName)}:[${references.startLineNumber} - ${references.endLineNumber}]</span>`;
    chip.id = chipId;
    chip.setAttribute("contenteditable", "false");

    chipsData = { ...chipsData, [chipId]: references };
    if (commandEnable) {
        insertAtReference(chip);
    } else {
        insertChipAtCursor(chip, textInput);
    }
};

function truncateText(str) {
    if (str.length > 25) {
        return str.substr(0, 10) + '...' + str.substr(str.length - 10, str.length);
    }
    return str;
}

function dragOver(event) {
    event.preventDefault();
}

function drop(event) {
    event.preventDefault();
    const sel = window.getSelection();
    let range;
    if (document.caretRangeFromPoint)
        range = document.caretRangeFromPoint(event.clientX, event.clientY);
    else {
        sel.collapse(event.rangeParent, event.rangeOffset);
        range = sel.getRangeAt(0);
    }
    const draggedChipId = event.dataTransfer.getData('text/plain');
    const draggedChip = document.getElementById(draggedChipId);

    if (draggedChip) {
        // If the dragged chip exists, move it to the new drop position
        range.deleteContents();
        range.insertNode(draggedChip);
    }
}

function insertChipAtCursor(chip, textInput) {
    //chip property setting
    chip.setAttribute("draggable", "true");
    chip.addEventListener("dragstart", dragStart);
    chip.classList.add("mb-1", "px-[7px]", "border", "cursor-pointer", "rounded-[4px]", "inline-flex", "items-center", "chips");

    function dragStart(event) {
        event.dataTransfer.setData('text/plain', this.innerText);
    }
    // Get the current selection
    const selection = window.getSelection();
    const nonBreakingSpace = document.createElement("span");
    nonBreakingSpace.innerHTML = "&nbsp;";

    if (selection.rangeCount > 0 && textInput === document.activeElement) {
        // Get the range of the current selection
        const range = selection.getRangeAt(0);

        // Check if the cursor is at the end of the textInput
        if (range.startContainer === textInput && range.startOffset === textInput.childNodes.length) {
            // Append the chip at the end
            textInput.appendChild(chip);
            textInput.appendChild(nonBreakingSpace);
        } else {
            // Insert the chip at the current cursor position
            range.insertNode(chip);
            textInput.appendChild(nonBreakingSpace);
        }

    } else {
        // If there is no selection, append the chip at the end
        textInput.appendChild(chip);
        textInput.appendChild(nonBreakingSpace);
    }
}

function insertAtReference(chip) {

    chip.classList.add("mb-1", "px-[7px]", "border", "cursor-pointer", "rounded-[4px]", "inline-flex", "items-center", "chips-reference");

    const referenceChip = document.getElementById("reference-id");
    const referenceText = document.getElementById("add-reference-text");
    const refactorInput = document.getElementById("text-refactor-input");
    if (referenceText) {
        referenceText.remove();
    }
    referenceChip.innerHTML = "";
    referenceChip.appendChild(chip);
    referenceChip.appendChild(document.createTextNode("\u00A0"));

    refactorInput.focus();
}

function debounce(func, wait, immediate = false) {
    let timeout;

    return (...args) => {
        const context = this;

        const later = () => {
            timeout = null;
            if (!immediate) {
                func.apply(context, args);
            };
        };

        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);

        if (callNow) {
            func.apply(context, args);
        };
    };
}


function clearChat() {
    responseContainer.innerHTML = "";
    conversationHistory = [];

    vscode.postMessage({
        type: "clearChat",
    });
}



function gotoProfile() {
    

    vscode.postMessage({
        type: "gotoProfile",
    });
}

function scrollToBottom() {
    // responseContainer.scrollTo(0, responseContainer.scrollHeight);
    setTimeout(() => {
        if (responseContainer) {
            responseContainer.scrollTo(0, 999999);
        }
    }, 100);
}

function validateApiKey(apiKey) {
    if (isValidGeminiApiKey(apiKey)) {
        vscode.postMessage({
            type: "validate",
            value: apiKey,
        });
    } else {
        console.log('not valid api key');
    }
}

function isValidGeminiApiKey(apiKey) {
    // Regex pattern for a Google Gemini API key
    const apiKeyPattern = /^[a-zA-Z0-9-_]+$/;

    // Check if the API key matches the pattern
    return apiKeyPattern.test(apiKey);
}

function countLeadingSpacesOfLine(line) {
    const leadingSpaces = line.match(/^ */);
    return leadingSpaces ? leadingSpaces[0].length : 0;
}

function preProcessMarkdown(markdown) {
    const lines = markdown.split("\n");
  
    const processedLines = lines.map(line => {
        const leadingSpaces = countLeadingSpacesOfLine(line);
  
        if (leadingSpaces % 4 !== 0) {
            const leadingSpacesToAdd = (Math.ceil(leadingSpaces / 4)) * 4 - leadingSpaces;
            return " ".repeat(leadingSpacesToAdd) + line;
        } 
    
        return line;
    });
  
    return processedLines.join("\n");
}

function startAttributeExtension() {
    let startNumbers = [];

    return [
        {
            type: "lang", 
            filter: function (text) {
                const olMarkdownRegex = /^\s*(\d+)\. /gm;

                const lines = text.split("\n");

                lines.forEach(line => {
                    const match = olMarkdownRegex.exec(line);

                    if (match) {
                        startNumbers.push(match[1]);
                    }
                });

                return text;
            }
        }, 
        {
            type: "output", 
            filter: function (text) {
                if (startNumbers.length > 0) {
                    const lines = text.split("\n");

                    lines.forEach((line, index) => {
                        if (line.includes("<ol>")) {
                            const startNumber = startNumbers.shift();
                            lines[index] = line.replace("<ol>", `<ol start="${startNumber}">`);
                        }
                    });

                    text = lines.join("\n");
                }

                return text;
            }
        }
    ];
}

function displayMessages() {
    responseContainer.innerHTML = "";

    let modelCount = 0;

    conversationHistory.forEach((message) => {
        const messageElement = document.createElement("div");
        const roleElement = document.createElement("p");
        const contentElement = document.createElement("p");
        const buttonContainer = document.createElement("p");
        const agent = document.createElement("span");
        if (message.role === "model") {
            modelCount++;

            roleElement.innerHTML = `<div class="inline-flex flex-row items-center">${dashAI}<span class="font-bold text-md ml-1">Dash AI</span></div>`;
            roleElement.classList.add("block", "w-full", "px-2.5", "py-1.5", "bg-[#497BEF]/[.2]");
            contentElement.classList.add("text-sm", "block", "px-2.5", "py-1.5", "pt-2", "break-words", "leading-relaxed", "bg-[#497BEF]/[.2]");
            contentElement.innerHTML = markdownToPlain(message.parts);
            if (modelCount === 1 && !stepOneCompleted) {
                stepOneCompleted = true;
                // Update UI or perform actions for Step One completion
                onboardingText.textContent = "That is insightful, isn't it? Now lets try something related to your workspace using @workspace annotation.";
                textInput.textContent = "@workspace help me find router code and it's location.";

            } else if (modelCount === 2 && !onboardingCompleted) {
                onboardingCompleted = true;
                // Update UI or perform actions for Onboarding completion
                onboardingText.textContent = "Awesome! You can watch more use cases here.";
                textInput.textContent = "";
                textInput.contentEditable = true;
                onboardingArrowIcon.classList.add("hidden");
                onboardingText.classList.add("hidden");
                tryFlutterText.classList.add("hidden");
            }
        } else if (message.role === "user") {
            roleElement.innerHTML = "<strong>You</strong>";
            roleElement.classList.add("block", "w-full", "px-2.5", "py-1.5", "user-message");
            contentElement.classList.add("text-sm", "block", "w-full", "px-2.5", "py-1.5", "break-words", "user-message");
            contentElement.innerHTML = markdownToPlain(message.parts);
            debugger;
            if (message.agent && message.agent?.trim() !== "") {
                agent.classList.add("text-pink-500", "block", "w-full", "px-2.5", "user-message");
                agent.textContent = message.agent;
            }
        } else if (message.role === "dash") {
            //UI implementation
            roleElement.innerHTML = "<strong class='text-white'>Dash AI</strong>";
            roleElement.classList.add("block", "w-full", "px-2.5", "py-1.5", "bg-[#497BEF]");
            contentElement.classList.add("text-sm", "block", "w-full", "px-2.5", "py-1.5", "break-words", "bg-[#497BEF]", "text-white");
            contentElement.innerHTML = markdownToPlain(message.parts);
            buttonContainer.classList.add("inline-flex", "w-full", "px-2.5", "py-1.5",
                "bg-[#497BEF]");
            const messageIndex = conversationHistory.indexOf(message);
            message?.buttons.forEach((type) => {
                const button = document.createElement("div");
                button.classList.add("px-2.5", "py-1.5",  "text-xs", "uppercase", "mr-1", "rounded-[2px]", "cursor-pointer");
                if (['disable', 'decline', 'reject', 'cancel', 'dismiss', 'close' ,'delete'].includes(type)) {
                    button.classList.add("bg-[#f2f2f2]", "text-black");
                } else {
                    button.classList.add("bg-pink-400", "text-white");
                }
                button.textContent = type;
                button.addEventListener("click", () => handleButtonEvent(message.agent, message.data, messageIndex, type));
                buttonContainer.appendChild(button);
            });
        }
        messageElement.classList.add("mt-1");
        messageElement.appendChild(roleElement);
        messageElement.appendChild(agent);
        messageElement.appendChild(contentElement);
        messageElement.appendChild(buttonContainer);
        responseContainer.appendChild(messageElement);
        scrollToBottom();
    });
    setResponse();
}

function handleButtonEvent(agent, data, messageId, buttonType) {
    vscode.postMessage({
        type: "dashResponse",
        value: JSON.stringify({ agent, data, messageId, buttonType })
    });
}

function setResponse() {
    const preCodeBlocks = document.querySelectorAll("code");
    preCodeBlocks.forEach((_preCodeBlock) => {
        _preCodeBlock.classList.add(
            "p-1",
            "my-2",
            "language-dart"
        );
    });

    const preBlocks = document.querySelectorAll("pre");
    preBlocks.forEach((_preBlock) => {
        _preBlock.classList.add("language-dart", "relative", "my-5");
        Prism.highlightElement(_preBlock);

        const iconContainer = document.createElement("div");
        iconContainer.id = "icon-container";
        iconContainer.classList.add("absolute", "top-2", "right-2", "inline-flex", "flex-row", "bg-white", "h-8", "w-16", "z-10", "justify-center", "items-center", "rounded-md", "opacity-0");
        iconContainer.style.backgroundColor = activityBarBackground;

        const _copyIcon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        _copyIcon.innerHTML = copyIcon;
        _copyIcon.id = "copy-icon";
        _copyIcon.classList.add("h-7", "w-7", "inline-flex", "justify-center", "items-center", "cursor-pointer");
        _copyIcon.style.fill = activityBarForeground;
        _copyIcon.setAttribute("alt", "Copy");
        iconContainer.appendChild(_copyIcon);

        _copyIcon.addEventListener("click", () => {
            const textToCopy = _preBlock.textContent.trim();
            navigator.clipboard.writeText(textToCopy);
            vscode.postMessage({
                type: "copyCode",
            });
        });

        const _mergeIcon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        _mergeIcon.innerHTML = mergeIcon;
        _mergeIcon.id = "merge-icon";
        _mergeIcon.classList.add("h-7", "w-7", "inline-flex", "justify-center", "items-center", "cursor-pointer");
        _mergeIcon.style.fill = activityBarForeground;
        _mergeIcon.setAttribute("alt", "Merge");
        iconContainer.appendChild(_mergeIcon);

        _mergeIcon.addEventListener("click", () => {
            vscode.postMessage({
                type: "mergeCode",
                value: _preBlock.textContent.trim(),
            });
        });

        _preBlock.appendChild(iconContainer);

        _preBlock.addEventListener("mouseenter", () => {
            iconContainer.style.opacity = 1;
        });

        _preBlock.addEventListener("mouseleave", () => {
            iconContainer.style.opacity = 0;
        });
    });

    const codeBlocks = document.querySelectorAll("code");
    codeBlocks.forEach((_codeBlock) => {
        _codeBlock.classList.add("rounded-sm", "language-dart");
        _codeBlock.addEventListener("click", function (e) {
            e.preventDefault();
            vscode.postMessage({
                type: "codeSelected",
                value: this.innerText,
            });
        });
    });
}

//converting markdown to html
function markdownToPlain(input) {
    const converter = new showdown.Converter({
        omitExtraWLInCodeBlocks: true,
        simplifiedAutoLink: true,
        excludeTrailingPunctuationFromURLs: true,
        literalMidWordUnderscores: true,
        simpleLineBreaks: true,
        openLinksInNewWindow: true, // Add this option to open links in a new window
        ghCodeBlocks: true, // Enable GitHub-style code blocks (optional for better styling)
        strikethrough: true, // Enable strikethrough syntax (optional)
        tasklists: true, // Enable task list syntax for checkboxes (optional)
        extensions: [startAttributeExtension]
    });
    processedInput = preProcessMarkdown(input);
    html = converter.makeHtml(processedInput);
    return html;
}

async function updateValidationList(message) {
    const existingListItem = document.querySelector(`li[data-type="${message.type}"]`);

    if (existingListItem) {
        existingListItem.textContent = message.value;
    } else {
        const listItem = document.createElement('li');
        listItem.textContent = message.value;
        listItem.setAttribute('data-type', message.type);
        if (message.value.includes("invalid") || message.value.includes("not")) {
            listItem.classList.add("invalid");
        } else {
            listItem.classList.add("valid");
        }
        validationList.appendChild(listItem);
    }

    // Check for specific messages to update flags
    switch (message.type) {
        case "apiKeyValidation":
            isApiKeyValid = message.value === "Gemini API Key is valid";
            if (!isApiKeyValid) {
                existingListItem.classList.add("invalid");
                existingListItem.classList.remove("valid");
            } else {
                existingListItem?.classList.add("valid");
                existingListItem?.classList.remove("invalid");
            }
            break;
        case "dependencyValidation":
            areDependenciesInstalled = message.value === "All dependencies are installed";
            if (!areDependenciesInstalled) {
                existingListItem.classList.add("invalid");
                existingListItem.classList.remove("valid");
            } else {
                existingListItem?.classList.add("valid");
                existingListItem?.classList.remove("invalid");
            }
            break;
    }

    // Check if both conditions are met, add "All permissions look good"
    if (isApiKeyValid && areDependenciesInstalled) {
        bodyContainer.classList.add("flex", "flex-col");
        bottomContainer.classList.remove("hidden");
        bottomContainer.classList.add("flex");
        setAPIKeyInSettings();

    } else {
        // Remove "All permissions look good" item if conditions are not met
        bodyContainer.classList.remove("flex", "flex-col");
        bottomContainer.classList.add("hidden");
        bottomContainer.classList.remove("flex");

    }
}

function setAPIKeyInSettings() {
    const geminiAPIKey = googleApiKeyTextInput.value;
    vscode.postMessage({
        type: "updateSettings",
        value: geminiAPIKey
    });
}

function adjustHeight() {
    textInput.style.height = 'auto';
    textInput.style.height = textInput.scrollHeight + 'px';
}

// Function to introduce a delay using a Promise
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
