## Dart Code Samples:

Here are multiple Dart code samples showcasing different language features:

**1. Basic Data Types and Operations:**

```dart
void main() {
  // String
  String name = "Dart";
  print("Hello, $name!");

  // Integer
  int age = 10;
  print("$name is $age years old.");

  // Double
  double price = 19.99;
  print("The price is \$${price.toStringAsFixed(2)}");

  // Boolean
  bool isActive = true;
  print("Is active? $isActive");
}
```

**2. Lists and Iteration:**

```dart
void main() {
  List<String> fruits = ["Apple", "Banana", "Orange"];

  // Accessing elements
  print(fruits[0]); // Output: Apple

  // Iterating through the list
  for (String fruit in fruits) {
    print("I like $fruit");
  }

  // Adding an element
  fruits.add("Mango");

  // Removing an element
  fruits.remove("Banana");
}
```

**3. Maps and Key-Value Pairs:**

```dart
void main() {
  Map<String, dynamic> user = {
    "name": "John Doe",
    "age": 30,
    "city": "New York"
  };

  // Accessing values
  print(user["name"]); // Output: John Doe

  // Adding a key-value pair
  user["occupation"] = "Engineer";

  // Iterating through the map
  user.forEach((key, value) {
    print("$key: $value");
  });
}
```

**4. Functions:**

```dart
// Function with parameters and return type
int sum(int a, int b) {
  return a + b;
}

// Arrow function
int multiply(int a, int b) => a * b;

void main() {
  int result1 = sum(5, 3);
  print("Sum: $result1"); // Output: Sum: 8

  int result2 = multiply(4, 6);
  print("Product: $result2"); // Output: Product: 24
}
```

**5. Classes and Objects:**

```dart
class Car {
  String brand;
  String model;
  int year;

  Car(this.brand, this.model, this.year);

  void displayInfo() {
    print("Brand: $brand, Model: $model, Year: $year");
  }
}

void main() {
  // Creating an object of the Car class
  Car myCar = Car("Toyota", "Camry", 2022);

  // Accessing object properties
  print(myCar.brand); // Output: Toyota

  // Calling object methods
  myCar.displayInfo(); // Output: Brand: Toyota, Model: Camry, Year: 2022
}
```

**6. Asynchronous Programming with Futures:**

```dart
Future<String> fetchData() async {
  await Future.delayed(Duration(seconds: 2));
  return "Data fetched successfully!";
}

void main() async {
  print("Fetching data...");
  String data = await fetchData();
  print(data); // Output: Data fetched successfully!
}
```

These are just a few examples to get you started. Dart offers a wide range of features like inheritance, mixins, generics, and more, allowing you to build complex and efficient applications. You can explore the official Dart documentation and resources for more in-depth learning:

- **Dart Documentation:** https://dart.dev/guides
- **Dart Tutorial:** https://dart.dev/tutorials
- **Dart Language Tour:** https://dart.dev/guides/language/language-tour